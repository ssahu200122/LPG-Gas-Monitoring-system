import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:provider/provider.dart';
import 'package:firebase_auth/firebase_auth.dart'; // Ensure User type is available

// Import services
import 'package:lpg_app/services/auth_service.dart';
import 'package:lpg_app/services/firestore_service.dart';
import 'package:lpg_app/services/notification_service.dart';

// Import screens
import 'package:lpg_app/screens/splash_screen.dart';
import 'package:lpg_app/screens/auth_screen.dart';
import 'package:lpg_app/screens/root_screen.dart'; // RootScreen holds the BottomNavBar

// Import Firebase options generated by FlutterFire CLI
import 'firebase_options.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    // Instantiate NotificationService here, but its context will be set later
    final NotificationService notificationService = NotificationService();

    return MultiProvider(
      providers: [
        Provider<AuthService>(create: (_) => AuthService()),
        Provider<FirestoreService>(create: (_) =>  FirestoreService()),
        Provider<NotificationService>(create: (_) => notificationService), // Provide the instance
        StreamProvider<User?>(
          create: (context) => context.read<AuthService>().userChanges,
          initialData: null, // Required: Keep initialData: null
        ),
      ],
      // Use a Builder to get a context that has access to the Providers
      child: Builder(
        builder: (context) {
          // Set the context for NotificationService here, AFTER Providers are available
          // This ensures NotificationService can access other providers (like FirestoreService)
          notificationService.setContext(context);
          
          return MaterialApp(
            title: 'LPG Monitor',
            debugShowCheckedModeBanner: false,
            theme: ThemeData(
              primarySwatch: Colors.teal,
              visualDensity: VisualDensity.adaptivePlatformDensity,
              appBarTheme: const AppBarTheme(
                backgroundColor: Colors.teal,
                foregroundColor: Colors.white,
                elevation: 4,
                shadowColor: Colors.black54,
              ),
              floatingActionButtonTheme: FloatingActionButtonThemeData(
                backgroundColor: Colors.teal.shade700,
                foregroundColor: Colors.white,
              ),
              elevatedButtonTheme: ElevatedButtonThemeData(
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.teal,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                  textStyle: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  elevation: 5,
                  shadowColor: Colors.black26,
                ),
              ),
              outlinedButtonTheme: OutlinedButtonThemeData(
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.teal,
                  side: BorderSide(color: Colors.teal.shade700),
                ),
              ),
              inputDecorationTheme: InputDecorationTheme(
                filled: true,
                fillColor: Colors.white,
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                  borderSide: BorderSide.none,
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                  borderSide: const BorderSide(color: Colors.teal, width: 2),
                ),
                enabledBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                  borderSide: BorderSide.none,
                ),
              ),
              cardTheme: CardThemeData(
                elevation: 8,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15),
                ),
                margin: const EdgeInsets.all(16),
                shadowColor: Colors.black26,
              ),
            ),
            home: const SplashScreen(),
            routes: {
              '/auth': (context) => const AuthScreen(),
              '/root': (context) => const RootScreen(),
            },
          );
        },
      ),
    );
  }
}